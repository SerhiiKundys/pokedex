{"version":3,"sources":["components/cards/SelectedPokemon.js","api/requestApi.js","redux/actions/actions.js","redux/types/types.js","components/common/TypeColors.js","components/cards/PokemonCard.js","components/TypesFilter.js","components/common/Preloader.js","components/Pokemons.js","App.js","redux/reducers/pokemonReducer.js","redux/reducers/filterReducer.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","selectedPokemonContainer","maxWidth","createData","name","value","connect","state","selectedPokemon","pokemon","classes","rows","types","join","stats","attack","defense","hp","speed","weight","totalMoves","Card","className","CardContent","align","src","img","alt","Typography","variant","gutterBottom","TableContainer","component","Paper","style","overflow","Table","size","aria-label","TableBody","map","row","TableRow","key","TableCell","scope","requestAPI","request","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","console","log","setFetchingInProcess","fetchingInProcess","type","setPokemons","pokemons","setNextChunk","nextChunk","fetchPokemonData","pokemonData","getPokemonsData","pokemonsData","pokemonTypes","stat","base_stat","pokemonStats","push","moves","length","sprites","front_default","setIsFilterOpened","isOpened","useStylesTypeColors","normal","backgroundColor","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","pokemonCardContainer","pokemonCardContent","cursor","typesContainer","display","flexWrap","typesItem","color","padding","borderRadius","isPokemonSelected","setSelectedPokemon","setIsPokemonSelected","typeColors","Box","onClick","m","Hidden","mdUp","Dialog","onClose","aria-labelledby","open","theme","formControl","margin","spacing","filter","setSelectedTypes","selectedType","handleChange","event","target","checked","DialogTitle","id","FormControl","FormGroup","Object","keys","FormControlLabel","control","Checkbox","onChange","label","preloaderContainer","justifyContent","Preloader","CircularProgress","pokemonsContainer","blueButton","position","top","fetchPokemons","dispatch","fetchedPokemons","results","next","error","React","useState","selectedTypes","useEffect","appropriateTypes","entries","Grid","container","item","xs","sm","md","xl","square","Button","superset","every","indexOf","lg","fullWidth","smDown","App","initialState","reducers","combineReducers","action","assign","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"oWAaMA,EAAYC,YAAW,CAC3BC,yBAA0B,CACxBC,SAAU,OAIRC,EAAa,SAACC,EAAMC,GAAP,MAAkB,CAAED,OAAMC,UAiD9BC,eANS,SAACC,GACvB,MAAO,CACLC,gBAAiBD,EAAME,QAAQD,mBAIK,KAAzBF,EA/CS,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,gBACnBE,EAAUX,IAEVY,EAAO,CACXR,EAAW,OAAQK,EAAgBI,MAAMC,KAAK,OAC9CV,EAAW,SAAUK,EAAgBM,MAAMC,QAC3CZ,EAAW,UAAWK,EAAgBM,MAAME,SAC5Cb,EAAW,KAAMK,EAAgBM,MAAMG,IACvCd,EAAW,YAAaK,EAAgBM,MAAM,mBAC9CX,EAAW,aAAcK,EAAgBM,MAAM,oBAC/CX,EAAW,QAASK,EAAgBM,MAAMI,OAC1Cf,EAAW,SAAUK,EAAgBW,QACrChB,EAAW,cAAeK,EAAgBY,aAG5C,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAWZ,EAAQT,0BACvB,kBAACsB,EAAA,EAAD,CAAaC,MAAM,UACjB,yBAAKC,IAAKjB,EAAgBkB,IAAKC,IAAI,uBACnC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAClCtB,EAAgBJ,MAEnB,kBAAC2B,EAAA,EAAD,CAAgBC,UAAWC,IAAOC,MAAO,CAAEC,SAAU,WACnD,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,aAAW,gBAC7B,kBAACC,EAAA,EAAD,KACG5B,EAAK6B,KAAI,SAACC,GAAD,OACR,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAIrC,MACjB,kBAACwC,EAAA,EAAD,CAAWZ,UAAU,KAAKa,MAAM,OAC7BJ,EAAIrC,MAEP,kBAACwC,EAAA,EAAD,CAAWpB,MAAM,SAASiB,EAAIpC,mB,yCCnDnCyC,EAAa,CACxBC,QAAQ,WAAD,4BAAE,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GAAnD,SAEDD,IACFA,EAAOE,KAAKC,UAAUH,GACtBC,EAAQ,gBAAkB,oBAJvB,SAOkBG,MAAMP,EAAK,CAAEE,SAAQC,OAAMC,YAP7C,cAOCI,EAPD,iBAQcA,EAASC,OARvB,WAQCC,EARD,OAUAF,EAASG,GAVT,uBAWG,IAAIC,MAAMF,EAAKG,SAAW,sBAX7B,iCAaEH,GAbF,wCAeLI,QAAQC,IAAI,KAAEF,SAfT,+DAAF,mDAAC,ICcGG,EAAuB,SAACC,GAAD,MAAwB,CAC1DC,KChBqC,mCDiBrCD,sBAGWE,EAAc,SAACC,GAAD,MAAe,CACxCF,KCpBmC,wBDqBnCE,aAGWC,EAAe,SAACC,GAAD,MAAgB,CAC1CJ,KCxBqC,0BDyBrCI,cAaIC,EAAgB,uCAAG,WAAOvB,GAAP,eAAAC,EAAA,sEACGH,EAAWC,QAAQC,EAAK,MAAO,MADlC,cACjBwB,EADiB,yBAEhBA,GAFgB,2CAAH,sD,SAKPC,E,8EAAf,WAA+BL,GAA/B,6BAAAnB,EAAA,sDACMyB,EAAe,GADrB,cAEwBN,GAFxB,gEAEa3D,EAFb,iBAG8B8D,EAAiB9D,EAAQuC,KAHvD,OAGUwB,EAHV,OAKUG,EAAeH,EAAY5D,MAAM4B,KAAI,SAAC0B,GAAD,OAAUA,EAAKA,KAAK9D,QALnE,mBAQOoE,EAAY1D,MAAM,GAAG8D,KAAKxE,KAAOoE,EAAY1D,MAAM,GAAG+D,WAR7D,cASOL,EAAY1D,MAAM,GAAG8D,KAAKxE,KAAOoE,EAAY1D,MAAM,GAAG+D,WAT7D,cAUOL,EAAY1D,MAAM,GAAG8D,KAAKxE,KAAOoE,EAAY1D,MAAM,GAAG+D,WAV7D,cAWOL,EAAY1D,MAAM,GAAG8D,KAAKxE,KAAOoE,EAAY1D,MAAM,GAAG+D,WAX7D,cAYOL,EAAY1D,MAAM,GAAG8D,KAAKxE,KAAOoE,EAAY1D,MAAM,GAAG+D,WAZ7D,cAaOL,EAAY1D,MAAM,GAAG8D,KAAKxE,KAAOoE,EAAY1D,MAAM,GAAG+D,WANnDC,EAPV,EAgBIJ,EAAaK,KAAK,CAChB3E,KAAMoE,EAAYpE,KAClBe,OAAQqD,EAAYrD,OACpBC,WAAYoD,EAAYQ,MAAMC,OAC9BrE,MAAO+D,EACP7D,MAAOgE,EACPpD,IAAK8C,EAAYU,QAAQC,gBAtB/B,wKA0BST,GA1BT,iE,sBA6BO,IA0BMU,EAAoB,SAACC,GAAD,MAAe,CAC9CnB,KC/FsC,2BDgGtCmB,aEnGWC,EAAsBtF,YAAW,CAC5CuF,OAAQ,CACNC,gBAAiB,WAEnBC,SAAU,CACRD,gBAAiB,WAEnBE,OAAQ,CACNF,gBAAiB,WAEnBG,OAAQ,CACNH,gBAAiB,WAEnBI,OAAQ,CACNJ,gBAAiB,WAEnBK,KAAM,CACJL,gBAAiB,WAEnBM,IAAK,CACHN,gBAAiB,WAEnBO,MAAO,CACLP,gBAAiB,WAEnBQ,MAAO,CACLR,gBAAiB,WAEnBS,KAAM,CACJT,gBAAiB,WAEnBU,MAAO,CACLV,gBAAiB,WAEnBW,MAAO,CACLX,gBAAiB,WAEnBY,SAAU,CACRZ,gBAAiB,WAEnBa,QAAS,CACPb,gBAAiB,WAEnBc,IAAK,CACHd,gBAAiB,WAEnBe,OAAQ,CACNf,gBAAiB,WAEnBgB,KAAM,CACJhB,gBAAiB,WAEnBiB,MAAO,CACLjB,gBAAiB,WAEnBkB,QAAS,CACPlB,gBAAiB,WAEnBmB,OAAQ,CACNnB,gBAAiB,aC5CfzF,EAAYC,YAAW,CAC3B4G,qBAAsB,CACpB1G,SAAU,KAEZ2G,mBAAoB,CAClBC,OAAQ,WAEVC,eAAgB,CACdC,QAAS,OACTC,SAAU,QAEZC,UAAW,CACTC,MAAO,QACPC,QAAS,EACTC,aAAc,KA+EH/G,eANS,SAACC,GACvB,MAAO,CACL+G,kBAAmB/G,EAAME,QAAQ6G,qBAIG,CACtCC,mBHlFgC,SAAC/G,GAAD,MAAsB,CACtD0D,KC3BmC,wBD4BnC1D,oBGiFAgH,qBH9EkC,SAACF,GAAD,MAAwB,CAC1DpD,KCjCsC,2BDkCtCoD,uBG0EahH,EA3EK,SAAC,GAUd,IATLF,EASI,EATJA,KACAQ,EAQI,EARJA,MACAQ,EAOI,EAPJA,WACAN,EAMI,EANJA,MACAK,EAKI,EALJA,OACAO,EAII,EAJJA,IACA4F,EAGI,EAHJA,kBACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,qBAEM9G,EAAUX,IACV0H,EAAanC,IAmBnB,OACE,kBAACjE,EAAA,EAAD,CAAMC,UAAWZ,EAAQkG,sBACvB,kBAACc,EAAA,EAAD,CACE1F,UAAU,OACV2F,QArBiB,WACrBJ,EAAmB,CACjBnH,OACAQ,QACAQ,aACAN,QACAK,SACAO,QAGF8F,GAAqB,IAYjBlG,UAAWZ,EAAQmG,oBAEnB,kBAACtF,EAAA,EAAD,CAAaC,MAAM,UACjB,yBAAKC,IAAKC,EAAKC,IAAI,uBACnB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAClC1B,GAEH,kBAACsH,EAAA,EAAD,CAAK1F,UAAU,MAAMV,UAAWZ,EAAQqG,gBACrCnG,EAAM4B,KAAI,SAAC0B,GAAD,OACT,kBAACwD,EAAA,EAAD,CAAKE,EAAG,EAAG5F,UAAU,OAAOW,IAAKuB,GAC/B,0BAAM5C,UAAS,UAAKZ,EAAQwG,UAAb,YAA0BO,EAAWvD,KACjDA,UAOZ9D,GACC,kBAACyH,EAAA,EAAD,CAAQC,MAAI,GACV,kBAACC,EAAA,EAAD,CACEC,QA9BiB,WACzBR,GAAqB,IA8BbS,kBAAgB,sBAChBC,KAAMZ,GAEN,kBAAC,EAAD,Y,6CCrFNvH,EAAYC,aAAW,SAACmI,GAAD,MAAY,CACvCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,QAqDXhI,eAPS,SAACC,GACvB,MAAO,CACL8E,SAAU9E,EAAMgI,OAAOlD,SACvBzE,MAAOL,EAAMgI,OAAO3H,SAIgB,CACtC4H,iBJ2B8B,SAACC,GAAD,MAAmB,CACjDvE,KC3FmC,wBD4FnCuE,iBI5BArD,qBAFa9E,EAjDK,SAAC,GAKd,IAJLM,EAII,EAJJA,MACAyE,EAGI,EAHJA,SACAmD,EAEI,EAFJA,iBACApD,EACI,EADJA,kBAEM1E,EAAUX,IAEV2I,EAAe,SAACC,GACpBH,EAAiB,CAAEtE,KAAMyE,EAAMC,OAAOxI,KAAMC,MAAOsI,EAAMC,OAAOC,WAGlE,OACE,kBAACd,EAAA,EAAD,CACEC,QAAS,kBAAM5C,GAAkB,IACjC6C,kBAAgB,eAChBC,KAAM7C,GAEN,kBAACyD,EAAA,EAAD,CAAaC,GAAG,gBAAhB,gBACA,6BACE,kBAACC,EAAA,EAAD,CAAahH,UAAU,WAAWV,UAAWZ,EAAQ0H,aACnD,kBAACa,EAAA,EAAD,KACGC,OAAOC,KAAKvI,GAAO4B,KAAI,SAAC0B,GAAD,OACtB,kBAACkF,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACET,QAASjI,EAAMsD,GACfqF,SAAUb,EACVtI,KAAM8D,IAGVsF,MAAOtF,EACPvB,IAAKuB,c,SC9CfnE,EAAYC,aAAW,iBAAO,CAClCyJ,mBAAoB,CAClBzC,QAAS,OACT0C,eAAgB,SAChBtC,QAAS,SAcEuC,EAVG,WAChB,IAAMjJ,EAAUX,IAEhB,OACE,yBAAKuB,UAAWZ,EAAQ+I,oBACtB,kBAACG,EAAA,EAAD,QCAA7J,EAAYC,aAAW,SAACmI,GAAD,MAAY,CACvC0B,kBAAmB,CACjB7C,QAAS,OACT0C,eAAgB,UAElBI,WAAY,CACVtE,gBAAiB,UACjB2B,MAAO,QACP,UAAW,CACT3B,gBAAiB,YAGrBhF,gBAAiB,CACfuJ,SAAU,SACVC,IAAK,OAmIM1J,gBAVS,SAACC,GACvB,MAAO,CACL6D,SAAU7D,EAAME,QAAQ2D,SACxBH,kBAAmB1D,EAAME,QAAQwD,kBACjCK,UAAW/D,EAAME,QAAQ6D,UACzBgD,kBAAmB/G,EAAME,QAAQ6G,kBACjC1G,MAAOL,EAAMgI,OAAO3H,SAIgB,CACtCqJ,cNzF2B,eAACjH,EAAD,uDA7D3B,sDA6D2B,8CAA+B,WAC1DkH,GAD0D,iBAAAjH,EAAA,sEAIxDiH,EAASlG,GAAqB,IAJ0B,SAM1BlB,EAAWC,QAAQC,EAAK,MAAO,MANL,cAMlDmH,EANkD,gBAQrC1F,EAAgB0F,EAAgBC,SARK,OAQlD1G,EARkD,OAUxDwG,EAAS/F,EAAYT,IAErBwG,EAAS7F,EAAa8F,EAAgBE,OAEtCH,EAASlG,GAAqB,IAd0B,kDAgBxDF,QAAQwG,MAAM,KAAEzG,SAChBqG,EAASlG,GAAqB,IAjB0B,0DAA/B,uDM0F3BoB,qBAFa9E,EA/HE,SAAC,GAQX,IAPL2J,EAOI,EAPJA,cACA7F,EAMI,EANJA,SACAE,EAKI,EALJA,UACAL,EAII,EAJJA,kBACAqD,EAGI,EAHJA,kBACA1G,EAEI,EAFJA,MACAwE,EACI,EADJA,kBACI,EACsCmF,IAAMC,SAAS,IADrD,mBACGC,EADH,KACkBjC,EADlB,KAEJ+B,IAAMG,WAAU,WACdT,MACC,IAEHM,IAAMG,WAAU,WAGd,IAFA,IACIC,EAAmB,GACvB,MAFgBzB,OAAO0B,QAAQhK,GAE/B,eAA0B,CAArB,IAAIsD,EAAI,MACK,IAAZA,EAAK,IACPyG,EAAiB5F,KAAKb,EAAK,IAG/BsE,EAAiBmC,KAChB,CAAC/J,IAEJ,IAAMF,EAAUX,IAchB,OACE,yBAAKuB,UAAWZ,EAAQmJ,mBACtB,kBAACgB,EAAA,EAAD,CACEC,WAAS,EACTC,MAAI,EACJzC,QAAS,EACT0C,GAAI,GACJC,GAAI,EACJC,GAAI,GACJC,GAAI,EACJ3J,MAAM,UAEN,kBAACqJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACtD,EAAA,EAAD,CAAKE,EAAG,EAAG1H,SAAU,KACnB,gCACE,kBAAC+B,EAAA,EAAD,CAAOJ,QAAQ,WAAWuJ,QAAM,GAC9B,kBAACxJ,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAIN,kBAACwJ,EAAA,EAAD,CACExJ,QAAQ,YACRP,UAAWZ,EAAQoJ,WACnBnC,QA/BY,WACpBvC,GAAkB,KA2BZ,WAQF,kBAACyF,EAAA,EAAD,CAAME,MAAI,EAACD,WAAS,EAACE,GAAI,GAAIE,GAAI,EAAG5C,QAAS,GAC1ClE,EACEmE,QAAO,SAAC9H,GAAD,OAlCM6K,EAkCsB7K,EAAQG,MAAO6J,EAjC7Cc,OAAM,SAAClL,GAAD,OAAWiL,EAASE,QAAQnL,IAAU,KADrC,IAACiL,KAmCb9I,KAAI,SAAC/B,GAAD,OACH,kBAACoK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGO,GAAI,EAAG9I,IAAKlC,EAAQL,MACnD,kBAAC,EAAD,CACEA,KAAMK,EAAQL,KACdQ,MAAOH,EAAQG,MACfO,OAAQV,EAAQU,OAChBC,WAAYX,EAAQW,WACpBN,MAAOL,EAAQK,MACfY,IAAKjB,EAAQiB,UAIpBuC,GACC,kBAAC4G,EAAA,EAAD,CAAME,MAAI,EAACD,WAAS,EAACE,GAAI,GAAI1C,QAAS,GACpC,kBAACuC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,SAIJ/G,GACA,kBAAC4G,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CACExJ,QAAQ,YACRP,UAAWZ,EAAQoJ,WACnBnC,QAnEK,WACjBsC,EAAc3F,IAmEFoH,WAAS,GAJX,eAWLpE,GACC,kBAACO,EAAA,EAAD,CAAQ8D,QAAM,GACZ,kBAACd,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIE,GAAI,GACrB,yBAAK5J,UAAWZ,EAAQF,iBACtB,kBAAC,EAAD,UAMV,kBAAC,EAAD,U,MCrISoL,OARf,WACE,OACE,6BACE,kBAAC,GAAD,Q,2BCDAC,GAAe,CACnBzH,SAAU,GACVH,mBAAmB,EACnBK,UAAW,KACXgD,mBAAmB,EACnB9G,gBAAiB,CACfJ,KAAM,KACNU,MAAO,GACPF,MAAO,GACPO,OAAQ,KACRC,WAAY,KACZM,IAAK,OCdHmK,GAAe,CACnBxG,UAAU,EACVzE,MAAO,CACL2E,QAAQ,EACRE,UAAU,EACVC,QAAQ,EACRC,QAAQ,EACRC,QAAQ,EACRC,MAAM,EACNC,KAAK,EACLC,OAAO,EACPC,OAAO,EACPC,MAAM,EACNC,OAAO,EACPC,OAAO,EACPC,UAAU,EACVC,SAAS,EACTC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNC,OAAO,EACPC,SAAS,EACTC,QAAQ,ICtBRmF,GAAWC,aAAgB,CAC7BtL,QFiB4B,WAAmC,IAAlCF,EAAiC,uDAAzBsL,GAAcG,EAAW,uCAC9D,OAAQA,EAAO9H,MACb,IPzBmC,mCO0BjC,OAAOgF,OAAO+C,OAAO,GAAI1L,EAAO,CAC9B0D,kBAAmB+H,EAAO/H,oBAE9B,IP5BiC,wBO6B/B,OAAOiF,OAAO+C,OAAO,GAAI1L,EAAO,CAC9B6D,SAAS,GAAD,oBAAM7D,EAAM6D,UAAZ,aAAyB4H,EAAO5H,aAE5C,IP/BmC,0BOgCjC,OAAO8E,OAAO+C,OAAO,GAAI1L,EAAO,CAC9B+D,UAAW0H,EAAO1H,YAEtB,IPlCoC,2BOmClC,OAAO4E,OAAO+C,OAAO,GAAI1L,EAAO,CAC9B+G,kBAAmB0E,EAAO1E,oBAE9B,IPrCiC,wBOsC/B,OAAO4B,OAAO+C,OAAO,GAAI1L,EAAO,CAC9BC,gBAAiBwL,EAAOxL,kBAG5B,QACE,OAAOD,IExCXgI,ODwB2B,WAAmC,IAAlChI,EAAiC,uDAAzBsL,GAAcG,EAAW,uCAC7D,OAAQA,EAAO9H,MACb,IR5BiC,wBQ6B/B,OAAOgF,OAAO+C,OAAO,GAAI1L,EAAO,CAC9BK,MAAOsI,OAAO+C,OAAO,GAAI1L,EAAMK,MAAxBsI,OAAA,IAAAA,CAAA,GACJ8C,EAAOvD,aAAavE,KAAO8H,EAAOvD,aAAapI,UAGtD,IRjCoC,2BQkClC,OAAO6I,OAAO+C,OAAO,GAAI1L,EAAO,CAAE8E,SAAU2G,EAAO3G,WACrD,QACE,OAAO9E,MChCA2L,GAAQC,aACnBL,GACAM,aACEC,aAAgBC,MAChBC,OAAOC,8BAAgCD,OAAOC,iCCPlDC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,IAAO,kBAAC,GAAD,OACxBS,SAASC,eAAe,W","file":"static/js/main.40a6b6c4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n  selectedPokemonContainer: {\r\n    maxWidth: 220,\r\n  },\r\n});\r\n\r\nconst createData = (name, value) => ({ name, value });\r\n\r\nconst SelectedPokemon = ({ selectedPokemon }) => {\r\n  const classes = useStyles();\r\n\r\n  const rows = [\r\n    createData(\"Type\", selectedPokemon.types.join(\", \")),\r\n    createData(\"Attack\", selectedPokemon.stats.attack),\r\n    createData(\"Defense\", selectedPokemon.stats.defense),\r\n    createData(\"HP\", selectedPokemon.stats.hp),\r\n    createData(\"SP Attack\", selectedPokemon.stats[\"special-attack\"]),\r\n    createData(\"SP Defense\", selectedPokemon.stats[\"special-defense\"]),\r\n    createData(\"Speed\", selectedPokemon.stats.speed),\r\n    createData(\"Weight\", selectedPokemon.weight),\r\n    createData(\"Total moves\", selectedPokemon.totalMoves),\r\n  ];\r\n\r\n  return (\r\n    <Card className={classes.selectedPokemonContainer}>\r\n      <CardContent align=\"center\">\r\n        <img src={selectedPokemon.img} alt=\"pokemon appearance\" />\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          {selectedPokemon.name}\r\n        </Typography>\r\n        <TableContainer component={Paper} style={{ overflow: \"hidden\" }}>\r\n          <Table size=\"small\" aria-label=\"simple table\">\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.name}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">{row.value}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedPokemon: state.pokemon.selectedPokemon,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(SelectedPokemon);\r\n","export const requestAPI = {\r\n  request: async (url, method = \"GET\", body = null, headers = {}) => {\r\n    try {\r\n      if (body) {\r\n        body = JSON.stringify(body);\r\n        headers[\"Content-Type\"] = \"application/json\";\r\n      }\r\n\r\n      const response = await fetch(url, { method, body, headers });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || \"Something is wrong\");\r\n      }\r\n      return data;\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      throw e;\r\n    }\r\n  },\r\n};\r\n","import {\r\n  SET_FETCHING_IN_PROCESS,\r\n  POKEMONS_SET_POKEMONS,\r\n  POKEMONS_SET_NEXT_CHUNK,\r\n  POKEMONS_SET_IS_SELECTED,\r\n  POKEMONS_SET_SELECTED,\r\n  TYPES_FILTER_SET_TYPE,\r\n  TYPES_FILTER_SET_IS_OPEN,\r\n} from \"../types/types\";\r\n\r\nimport { requestAPI } from \"../../api/requestApi\";\r\n\r\nconst initialFetchRequest =\r\n  \"https://pokeapi.co/api/v2/pokemon?offset=0&limit=12\";\r\n\r\nexport const setFetchingInProcess = (fetchingInProcess) => ({\r\n  type: SET_FETCHING_IN_PROCESS,\r\n  fetchingInProcess,\r\n});\r\n\r\nexport const setPokemons = (pokemons) => ({\r\n  type: POKEMONS_SET_POKEMONS,\r\n  pokemons,\r\n});\r\n\r\nexport const setNextChunk = (nextChunk) => ({\r\n  type: POKEMONS_SET_NEXT_CHUNK,\r\n  nextChunk,\r\n});\r\n\r\nexport const setSelectedPokemon = (selectedPokemon) => ({\r\n  type: POKEMONS_SET_SELECTED,\r\n  selectedPokemon,\r\n});\r\n\r\nexport const setIsPokemonSelected = (isPokemonSelected) => ({\r\n  type: POKEMONS_SET_IS_SELECTED,\r\n  isPokemonSelected,\r\n});\r\n\r\nconst fetchPokemonData = async (url) => {\r\n  const pokemonData = await requestAPI.request(url, \"GET\", null);\r\n  return pokemonData;\r\n};\r\n\r\nasync function getPokemonsData(pokemons) {\r\n  let pokemonsData = [];\r\n  for (const pokemon of pokemons) {\r\n    const pokemonData = await fetchPokemonData(pokemon.url);\r\n\r\n    const pokemonTypes = pokemonData.types.map((type) => type.type.name);\r\n\r\n    const pokemonStats = {\r\n      [pokemonData.stats[1].stat.name]: pokemonData.stats[1].base_stat,\r\n      [pokemonData.stats[2].stat.name]: pokemonData.stats[2].base_stat,\r\n      [pokemonData.stats[0].stat.name]: pokemonData.stats[0].base_stat,\r\n      [pokemonData.stats[3].stat.name]: pokemonData.stats[3].base_stat,\r\n      [pokemonData.stats[4].stat.name]: pokemonData.stats[4].base_stat,\r\n      [pokemonData.stats[5].stat.name]: pokemonData.stats[5].base_stat,\r\n    };\r\n\r\n    pokemonsData.push({\r\n      name: pokemonData.name,\r\n      weight: pokemonData.weight,\r\n      totalMoves: pokemonData.moves.length,\r\n      types: pokemonTypes,\r\n      stats: pokemonStats,\r\n      img: pokemonData.sprites.front_default,\r\n    });\r\n  }\r\n\r\n  return pokemonsData;\r\n}\r\n\r\nexport const fetchPokemons = (url = initialFetchRequest) => async (\r\n  dispatch\r\n) => {\r\n  try {\r\n    dispatch(setFetchingInProcess(true));\r\n\r\n    const fetchedPokemons = await requestAPI.request(url, \"GET\", null);\r\n\r\n    const data = await getPokemonsData(fetchedPokemons.results);\r\n\r\n    dispatch(setPokemons(data));\r\n\r\n    dispatch(setNextChunk(fetchedPokemons.next));\r\n\r\n    dispatch(setFetchingInProcess(false));\r\n  } catch (e) {\r\n    console.error(e.message);\r\n    dispatch(setFetchingInProcess(false));\r\n  }\r\n};\r\n\r\nexport const setSelectedTypes = (selectedType) => ({\r\n  type: TYPES_FILTER_SET_TYPE,\r\n  selectedType,\r\n});\r\n\r\nexport const setIsFilterOpened = (isOpened) => ({\r\n  type: TYPES_FILTER_SET_IS_OPEN,\r\n  isOpened,\r\n});\r\n","export const SET_FETCHING_IN_PROCESS = \"POKEMONS/SET_FETCHING_IN_PROCESS\";\r\nexport const POKEMONS_SET_POKEMONS = \"POKEMONS/SET_POKEMONS\";\r\nexport const POKEMONS_SET_NEXT_CHUNK = \"POKEMONS/SET_NEXT_CHUNK\";\r\nexport const POKEMONS_SET_IS_SELECTED = \"POKEMONS/SET_IS_SELECTED\";\r\nexport const POKEMONS_SET_SELECTED = \"POKEMONS/SET_SELECTED\";\r\nexport const TYPES_FILTER_SET_TYPE = \"TYPES_FILTER/SET_TYPE\";\r\nexport const TYPES_FILTER_SET_IS_OPEN = \"TYPES_FILTER/SET_IS_OPEN\";\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStylesTypeColors = makeStyles({\r\n  normal: {\r\n    backgroundColor: \"#75b8ff\",\r\n  },\r\n  fighting: {\r\n    backgroundColor: \"#e07f24\",\r\n  },\r\n  flying: {\r\n    backgroundColor: \"#74b0b3\",\r\n  },\r\n  poison: {\r\n    backgroundColor: \"#6600ff\",\r\n  },\r\n  ground: {\r\n    backgroundColor: \"#00850f\",\r\n  },\r\n  rock: {\r\n    backgroundColor: \"#385482\",\r\n  },\r\n  bug: {\r\n    backgroundColor: \"#6c3882\",\r\n  },\r\n  ghost: {\r\n    backgroundColor: \"#677d85\",\r\n  },\r\n  steel: {\r\n    backgroundColor: \"#506066\",\r\n  },\r\n  fire: {\r\n    backgroundColor: \"#fc0303\",\r\n  },\r\n  water: {\r\n    backgroundColor: \"#00b9ff\",\r\n  },\r\n  grass: {\r\n    backgroundColor: \"#00ba28\",\r\n  },\r\n  electric: {\r\n    backgroundColor: \"#ffe600\",\r\n  },\r\n  psychic: {\r\n    backgroundColor: \"#ba43a8\",\r\n  },\r\n  ice: {\r\n    backgroundColor: \"#3bb5d1\",\r\n  },\r\n  dragon: {\r\n    backgroundColor: \"#96580c\",\r\n  },\r\n  dark: {\r\n    backgroundColor: \"#424242\",\r\n  },\r\n  fairy: {\r\n    backgroundColor: \"#9c575f\",\r\n  },\r\n  unknown: {\r\n    backgroundColor: \"#132d5c\",\r\n  },\r\n  shadow: {\r\n    backgroundColor: \"#7d746b\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nimport SelectedPokemon from \"./SelectedPokemon\";\r\n\r\nimport {\r\n  setSelectedPokemon,\r\n  setIsPokemonSelected,\r\n} from \"../../redux/actions/actions\";\r\nimport { useStylesTypeColors } from \"../common/TypeColors\";\r\n\r\nconst useStyles = makeStyles({\r\n  pokemonCardContainer: {\r\n    maxWidth: 180,\r\n  },\r\n  pokemonCardContent: {\r\n    cursor: \"pointer\",\r\n  },\r\n  typesContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  typesItem: {\r\n    color: \"white\",\r\n    padding: 5,\r\n    borderRadius: 7,\r\n  },\r\n});\r\n\r\nconst PokemonCard = ({\r\n  name,\r\n  types,\r\n  totalMoves,\r\n  stats,\r\n  weight,\r\n  img,\r\n  isPokemonSelected,\r\n  setSelectedPokemon,\r\n  setIsPokemonSelected,\r\n}) => {\r\n  const classes = useStyles();\r\n  const typeColors = useStylesTypeColors();\r\n\r\n  const onPokemonClick = () => {\r\n    setSelectedPokemon({\r\n      name,\r\n      types,\r\n      totalMoves,\r\n      stats,\r\n      weight,\r\n      img,\r\n    });\r\n\r\n    setIsPokemonSelected(true);\r\n  };\r\n\r\n  const onPokemonDataClose = () => {\r\n    setIsPokemonSelected(false);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.pokemonCardContainer}>\r\n      <Box\r\n        component=\"span\"\r\n        onClick={onPokemonClick}\r\n        className={classes.pokemonCardContent}\r\n      >\r\n        <CardContent align=\"center\">\r\n          <img src={img} alt=\"pokemon appearance\" />\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {name}\r\n          </Typography>\r\n          <Box component=\"div\" className={classes.typesContainer}>\r\n            {types.map((type) => (\r\n              <Box m={1} component=\"span\" key={type}>\r\n                <span className={`${classes.typesItem} ${typeColors[type]}`}>\r\n                  {type}\r\n                </span>\r\n              </Box>\r\n            ))}\r\n          </Box>\r\n        </CardContent>\r\n      </Box>\r\n      {name && (\r\n        <Hidden mdUp>\r\n          <Dialog\r\n            onClose={onPokemonDataClose}\r\n            aria-labelledby=\"simple-dialog-title\"\r\n            open={isPokemonSelected}\r\n          >\r\n            <SelectedPokemon />\r\n          </Dialog>\r\n        </Hidden>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isPokemonSelected: state.pokemon.isPokemonSelected,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  setSelectedPokemon,\r\n  setIsPokemonSelected,\r\n})(PokemonCard);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nimport { setSelectedTypes, setIsFilterOpened } from \"../redux/actions/actions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst TypesFilter = ({\r\n  types,\r\n  isOpened,\r\n  setSelectedTypes,\r\n  setIsFilterOpened,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedTypes({ type: event.target.name, value: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={() => setIsFilterOpened(false)}\r\n      aria-labelledby=\"dialog-title\"\r\n      open={isOpened}\r\n    >\r\n      <DialogTitle id=\"dialog-title\">Types filter</DialogTitle>\r\n      <div>\r\n        <FormControl component=\"fieldset\" className={classes.formControl}>\r\n          <FormGroup>\r\n            {Object.keys(types).map((type) => (\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={types[type]}\r\n                    onChange={handleChange}\r\n                    name={type}\r\n                  />\r\n                }\r\n                label={type}\r\n                key={type}\r\n              />\r\n            ))}\r\n          </FormGroup>\r\n        </FormControl>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isOpened: state.filter.isOpened,\r\n    types: state.filter.types,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  setSelectedTypes,\r\n  setIsFilterOpened,\r\n})(TypesFilter);\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  preloaderContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    padding: 100,\r\n  },\r\n}));\r\n\r\nconst Preloader = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.preloaderContainer}>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nimport PokemonCard from \"./cards/PokemonCard\";\r\nimport SelectedPokemon from \"./cards/SelectedPokemon\";\r\nimport TypesFilter from \"./TypesFilter\";\r\nimport Preloader from \"./common/Preloader\";\r\n\r\nimport { fetchPokemons, setIsFilterOpened } from \"../redux/actions/actions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pokemonsContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  blueButton: {\r\n    backgroundColor: \"#0095bf\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#11add9\",\r\n    },\r\n  },\r\n  selectedPokemon: {\r\n    position: \"sticky\",\r\n    top: 0,\r\n  },\r\n}));\r\n\r\nconst Pokemons = ({\r\n  fetchPokemons,\r\n  pokemons,\r\n  nextChunk,\r\n  fetchingInProcess,\r\n  isPokemonSelected,\r\n  types,\r\n  setIsFilterOpened,\r\n}) => {\r\n  const [selectedTypes, setSelectedTypes] = React.useState([]);\r\n  React.useEffect(() => {\r\n    fetchPokemons();\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const entries = Object.entries(types);\r\n    let appropriateTypes = [];\r\n    for (let type of entries) {\r\n      if (type[1] === true) {\r\n        appropriateTypes.push(type[0]);\r\n      }\r\n    }\r\n    setSelectedTypes(appropriateTypes);\r\n  }, [types]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const onLoadMore = () => {\r\n    fetchPokemons(nextChunk);\r\n  };\r\n\r\n  const onFilterClick = () => {\r\n    setIsFilterOpened(true);\r\n  };\r\n\r\n  const includingTypes = (superset, subset) => {\r\n    return subset.every((value) => superset.indexOf(value) >= 0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.pokemonsContainer}>\r\n      <Grid\r\n        container\r\n        item\r\n        spacing={2}\r\n        xs={12}\r\n        sm={8}\r\n        md={10}\r\n        xl={8}\r\n        align=\"center\"\r\n      >\r\n        <Grid item xs={12}>\r\n          <Box m={3} maxWidth={450}>\r\n            <header>\r\n              <Paper variant=\"outlined\" square>\r\n                <Typography variant=\"h3\">Pokedex</Typography>\r\n              </Paper>\r\n            </header>\r\n          </Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            className={classes.blueButton}\r\n            onClick={onFilterClick}\r\n          >\r\n            Filter\r\n          </Button>\r\n        </Grid>\r\n        <Grid item container xs={12} md={9} spacing={3}>\r\n          {pokemons\r\n            .filter((pokemon) => includingTypes(pokemon.types, selectedTypes))\r\n            .map((pokemon) => (\r\n              <Grid item xs={12} sm={6} md={4} lg={3} key={pokemon.name}>\r\n                <PokemonCard\r\n                  name={pokemon.name}\r\n                  types={pokemon.types}\r\n                  weight={pokemon.weight}\r\n                  totalMoves={pokemon.totalMoves}\r\n                  stats={pokemon.stats}\r\n                  img={pokemon.img}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          {fetchingInProcess && (\r\n            <Grid item container xs={12} spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Preloader />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          {!fetchingInProcess && (\r\n            <Grid item xs={12}>\r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.blueButton}\r\n                onClick={onLoadMore}\r\n                fullWidth\r\n              >\r\n                Load More\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n        {isPokemonSelected && (\r\n          <Hidden smDown>\r\n            <Grid item xs={12} md={3}>\r\n              <div className={classes.selectedPokemon}>\r\n                <SelectedPokemon />\r\n              </div>\r\n            </Grid>\r\n          </Hidden>\r\n        )}\r\n      </Grid>\r\n      <TypesFilter />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    pokemons: state.pokemon.pokemons,\r\n    fetchingInProcess: state.pokemon.fetchingInProcess,\r\n    nextChunk: state.pokemon.nextChunk,\r\n    isPokemonSelected: state.pokemon.isPokemonSelected,\r\n    types: state.filter.types,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  fetchPokemons,\r\n  setIsFilterOpened,\r\n})(Pokemons);\r\n","import React from \"react\";\n\nimport Pokemons from \"./components/Pokemons\";\n\nimport \"fontsource-roboto\";\n\nfunction App() {\n  return (\n    <div>\n      <Pokemons />\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  SET_FETCHING_IN_PROCESS,\r\n  POKEMONS_SET_POKEMONS,\r\n  POKEMONS_SET_NEXT_CHUNK,\r\n  POKEMONS_SET_IS_SELECTED,\r\n  POKEMONS_SET_SELECTED,\r\n} from \"../types/types\";\r\n\r\nconst initialState = {\r\n  pokemons: [],\r\n  fetchingInProcess: false,\r\n  nextChunk: null,\r\n  isPokemonSelected: false,\r\n  selectedPokemon: {\r\n    name: null,\r\n    stats: [],\r\n    types: [],\r\n    weight: null,\r\n    totalMoves: null,\r\n    img: null,\r\n  },\r\n};\r\n\r\nexport const pokemonReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FETCHING_IN_PROCESS:\r\n      return Object.assign({}, state, {\r\n        fetchingInProcess: action.fetchingInProcess,\r\n      });\r\n    case POKEMONS_SET_POKEMONS:\r\n      return Object.assign({}, state, {\r\n        pokemons: [...state.pokemons, ...action.pokemons],\r\n      });\r\n    case POKEMONS_SET_NEXT_CHUNK:\r\n      return Object.assign({}, state, {\r\n        nextChunk: action.nextChunk,\r\n      });\r\n    case POKEMONS_SET_IS_SELECTED:\r\n      return Object.assign({}, state, {\r\n        isPokemonSelected: action.isPokemonSelected,\r\n      });\r\n    case POKEMONS_SET_SELECTED:\r\n      return Object.assign({}, state, {\r\n        selectedPokemon: action.selectedPokemon,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  TYPES_FILTER_SET_TYPE,\r\n  TYPES_FILTER_SET_IS_OPEN,\r\n} from \"../types/types\";\r\n\r\nconst initialState = {\r\n  isOpened: false,\r\n  types: {\r\n    normal: false,\r\n    fighting: false,\r\n    flying: false,\r\n    poison: false,\r\n    ground: false,\r\n    rock: false,\r\n    bug: false,\r\n    ghost: false,\r\n    steel: false,\r\n    fire: false,\r\n    water: false,\r\n    grass: false,\r\n    electric: false,\r\n    psychic: false,\r\n    ice: false,\r\n    dragon: false,\r\n    dark: false,\r\n    fairy: false,\r\n    unknown: false,\r\n    shadow: false,\r\n  },\r\n};\r\n\r\nexport const filterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TYPES_FILTER_SET_TYPE:\r\n      return Object.assign({}, state, {\r\n        types: Object.assign({}, state.types, {\r\n          [action.selectedType.type]: action.selectedType.value,\r\n        }),\r\n      });\r\n    case TYPES_FILTER_SET_IS_OPEN:\r\n      return Object.assign({}, state, { isOpened: action.isOpened });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { pokemonReducer } from \"./reducers/pokemonReducer\";\r\nimport { filterReducer } from \"./reducers/filterReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  pokemon: pokemonReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}><App /></Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}